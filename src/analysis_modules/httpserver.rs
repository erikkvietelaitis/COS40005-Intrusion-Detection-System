use std::collections::HashMap;

use crate::lara_core::*;
use crate::ConfigField;
use core_traits::AnalysisModule;
use rand::Rng;

#[derive(Debug, Clone)]

// define the set of data that will be captured each tick, You can structure this however you like to fit your needs, Just call it this name
struct CurrentData<'a> {
    logs:HashMap<String,HashMap<String,String>>,
    veclogs: Vec<WebLog>,
}
struct WebLog {
    ip:String,
    msg:String,
    suspicion:String,
}
pub struct HTTPServer<'a> {
    // This is the data generated by gatherData in current tick, it will be erased by the next tick
    current_data: CurrentData<'a>,
    //Everything else is persistent memory. The data you set in these will be remembered between ticks
    lasterrorlen:usize,
    lastaccesslen:usize,
    module_name: String,
}

impl AnalysisModule for HTTPServer<'_> {
    // Use this to gather data from the host computer and store it in the current data struct,
    // This is called at the start of a tick to gather the data into CurrentData struct. If there is an error return false
    fn get_data(&mut self) -> bool {
        let errortestdata: &str ="[Wed Sep 11 13:10:31.495743 2024] [php:error] [pid 17084:tid 1904] [client ::1:53541] script 'C:/DevProjects/PersonalSite/Personal-Site/testing.php' not found or unable to stat\n[Wed Sep 11 13:17:29.031502 2024] [core:error] [pid 17084:tid 1892] (OS 5)Access is denied.  : [client ::1:53897] AH00132: file permissions deny server access: C:/DevProjects/PersonalSite/Personal-Site/tes.txt\n[Wed Sep 11 13:27:46.818722 2024] [core:error] [pid 17084:tid 1904] (OS 5)Access is denied.  : [client 192.168.0.45:50136] AH00132: file permissions deny server access: C:/DevProjects/PersonalSite/Personal-Site/tes.txt\n[Wed Sep 11 15:31:52.316572 2024] [ssl:warn] [pid 13840:tid 380] AH01909: www.example.com:443:0 server certificate does NOT include an ID which matches the server name\n[Wed Sep 11 15:31:52.342572 2024] [ssl:warn] [pid 13840:tid 380] AH01909: www.example.com:443:0 server certificate does NOT include an ID which matches the server name\n[Wed Sep 11 15:31:52.370156 2024] [mpm_winnt:notice] [pid 13840:tid 380] AH00354: Child: Starting 150 worker threads.";
        let accesstestdata: &str = "::1 - - [11/Sep/2024:13:18:57 +1000] \"GET /res/js/index.js HTTP/1.1\" 200 1024 \"http://localhost/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0\"\n::1 - - [11/Sep/2024:13:18:57 +1000] \"GET /res/css/styles.css?1.0.1 HTTP/1.1\" 200 3852 \"http://localhost/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0\"\n::1 - - [11/Sep/2024:13:18:57 +1000] \"GET /favicon.ico HTTP/1.1\" 404 295 \"http://localhost/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0\"\n::1 - - [11/Sep/2024:13:19:15 +1000] \"GET / HTTP/1.1\" 200 495 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0\"\n192.168.0.45 - - [11/Sep/2024:13:27:31 +1000] \"GET / HTTP/1.1\" 200 3967 \"-\" \"Mozilla/5.0 (iPhone; CPU iPhone OS 18_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.1 Mobile/15E148 Safari/604.1\"\n192.168.0.45 - - [11/Sep/2024:13:27:31 +1000] \"GET /res/js/index.js HTTP/1.1\" 200 1024 \"http://192.168.0.206/\" \"Mozilla/5.0 (iPhone; CPU iPhone OS 18_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.1 Mobile/15E148 Safari/604.1\"\n192.168.0.45 - - [11/Sep/2024:13:27:31 +1000] \"GET /res/css/styles.css?1.0.1 HTTP/1.1\" 200 3852 \"http://192.168.0.206/\" \"Mozilla/5.0 (iPhone; CPU iPhone OS 18_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.1 Mobile/15E148 Safari/604.1\"\n192.168.0.45 - - [11/Sep/2024:13:27:46 +1000] \"GET /tes.txt HTTP/1.1\" 403 302 \"-\" \"Mozilla/5.0 (iPhone; CPU iPhone OS 18_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.1 Mobile/15E148 Safari/604.1\"";
        //let errordump: &str = 
        let errordump: &str = errortestdata;
        //print!("{}",errordump);
        //let accessdump: &str = 
        let accessdump: &str = accesstestdata;
        //print!("{}",accessdump);
        let errorlines: Vec<&str> = errordump.lines().collect();
        let accesslines: Vec<&str> = accessdump.lines().collect();
        let accesslineslen: usize = accesslines.len();
        let errorlineslen: usize = errorlines.len();
        let mut elines: Vec<&str> = vec![];
        let mut alines: Vec<&str> = vec![]; 
        if accesslineslen > 0{
            let mut newalinecount:usize = accesslineslen - self.lastaccesslen;
            while newalinecount > 0{
                alines.push(accesslines[accesslineslen - newalinecount]);
                newalinecount = newalinecount - 1; 
            }
        }
        if errorlineslen > 0{
            let mut newelinecount:usize = errorlineslen - self.lasterrorlen;
            while newelinecount > 0{
                elines.push(errorlines[errorlineslen - newelinecount]);
                newelinecount = newelinecount - 1;
            }
        }
        let mut nl: &str;
        let mut i1: usize = 0;

        while i1 < elines.len(){
            nl = elines[i1];
            //print!("{}",nl);
            let nls: Vec<&str> = nl.split(&[']','[']).filter(|&r| r != "").collect();
            if nls[2].contains("php:error") || nls[2].contains("core:error"){
                let errorsplit: Vec<&str> = nl.split(nls[6]).collect();
                    
                let mut nlerrormsg:String = errorsplit[1].to_string();
                nlerrormsg.remove(0);
                let mut data:HashMap<String,String> = HashMap::new();
                //data.insert(nlerrormsg.to_string(),"1".to_string());
                data.insert("msg".to_string(),nlerrormsg.clone());
                data.insert("suspicion".to_string(),"1".to_string());
                if nls[6].contains("::1"){
                    let nlip:&str = "::1";
                    self.current_data.logs.insert(nlip.to_string(),data);
                    let nllog = WebLog{ip:nlip.to_string(),msg:nlerrormsg,suspicion:"1".to_string()};
                    self.current_data.veclogs.push(nllog);
                }else{
                    let ipsplit: Vec<&str> = nls[6].split(&[' ',':']).filter(|&r| r != "").collect();
                    let nlip:&str = ipsplit[1];
                    self.current_data.logs.insert(nlip.to_string(),data);
                    let nllog = WebLog{ip:nlip.to_string(),msg:nlerrormsg,suspicion:"1".to_string()};
                    self.current_data.veclogs.push(nllog);
                }
            }
            i1 = i1 + 1;
        }
        let mut i2: usize = 0;
        while i2 < alines.len(){
            nl = alines[i2];
            //print!("{}",nl);
            //print!("{}","\n");
            let nls: Vec<&str> = nl.split("\"").collect();
            let ipsplit: Vec<&str> = nls[0].split_whitespace().collect();
            //print!("{}",ipsplit[0]);
            let nlip:&str = ipsplit[0];
            let codesplit: Vec<&str> = nls[2].split_whitespace().collect();
            let nlcode:&str = codesplit[0];
            let nlrequest:&str = nls[1];
            let mut msg:String = String::from("request: ".to_string());
            msg.push_str(nlrequest);
            msg.push_str(" code: ");
            msg.push_str(nlcode);
            let mut suspicion:String = "0".to_string();
            if nlcode == "100"{
                suspicion = "0".to_string();
                msg.push_str(" Continue");
            }else if nlcode == "101"{
                suspicion = "0".to_string();
                msg.push_str(" Switching Protocols");
            }else if nlcode == "102"{
                suspicion = "0".to_string();
                msg.push_str(" Processing");
            }else if nlcode == "103"{
                suspicion = "0".to_string();
                msg.push_str(" Early Hints");
            }else if nlcode == "200"{
                suspicion = "0".to_string();
                msg.push_str(" OK");
            }else if nlcode == "201"{
                suspicion = "0".to_string();
                msg.push_str(" Created");
            }else if nlcode == "202"{
                suspicion = "0".to_string();
                msg.push_str(" Accepted");
            }else if nlcode == "203"{
                suspicion = "0".to_string();
                msg.push_str(" Non-Authoritative Information");
            }else if nlcode == "204"{
                suspicion = "0".to_string();
                msg.push_str(" No Content");
            }else if nlcode == "205"{
                suspicion = "0".to_string();
                msg.push_str(" Reset Content");
            }else if nlcode == "206"{
                suspicion = "0".to_string();
                msg.push_str(" Partial Content");
            }else if nlcode == "207"{
                suspicion = "0".to_string();
                msg.push_str(" Multi-Status");
            }else if nlcode == "208"{
                suspicion = "0".to_string();
                msg.push_str(" Already Reported");
            }else if nlcode == "226"{
                suspicion = "0".to_string();
                msg.push_str(" IM Used");
            }else if nlcode == "300"{
                suspicion = "0".to_string();
                msg.push_str(" Multiple Choices");
            }else if nlcode == "301"{
                suspicion = "0".to_string();
                msg.push_str(" Moved Permanently");
            }else if nlcode == "302"{
                suspicion = "0".to_string();
                msg.push_str(" Found");
            }else if nlcode == "303"{
                suspicion = "0".to_string();
                msg.push_str(" See Other");
            }else if nlcode == "304"{
                suspicion = "0".to_string();
                msg.push_str(" Not Modified");
            }else if nlcode == "305"{
                suspicion = "0".to_string();
                msg.push_str(" Use Proxy");
            }else if nlcode == "306"{
                suspicion = "0".to_string();
                msg.push_str(" unused");
            }else if nlcode == "307"{
                suspicion = "0".to_string();
                msg.push_str(" Temporary Redirect");
            }else if nlcode == "308"{
                suspicion = "0".to_string();
                msg.push_str(" Permanent Redirect");
            }else if nlcode == "400"{
                suspicion = "0".to_string();
                msg.push_str(" Bad Request");
            }else if nlcode == "401"{
                suspicion = "0".to_string();
                msg.push_str(" Unauthorized");
            }else if nlcode == "402"{
                suspicion = "0".to_string();
                msg.push_str(" Payment Required");
            }else if nlcode == "403"{
                suspicion = "0".to_string();
                msg.push_str(" Forbidden");
            }else if nlcode == "404"{
                suspicion = "0".to_string();
                msg.push_str(" Not Found");
            }else if nlcode == "405"{
                suspicion = "0".to_string();
                msg.push_str(" Method Not Allowed");
            }else if nlcode == "406"{
                suspicion = "0".to_string();
                msg.push_str(" Not Acceptable");
            }else if nlcode == "407"{
                suspicion = "0".to_string();
                msg.push_str(" Proxy Authentication Required");
            }else if nlcode == "408"{
                suspicion = "0".to_string();
                msg.push_str(" Request Timeout");
            }else if nlcode == "409"{
                suspicion = "0".to_string();
                msg.push_str(" Conflict");
            }else if nlcode == "410"{
                suspicion = "0".to_string();
                msg.push_str(" Gone");
            }else if nlcode == "411"{
                suspicion = "0".to_string();
                msg.push_str(" Length Required");
            }else if nlcode == "412"{
                suspicion = "0".to_string();
                msg.push_str(" Precondition Failed");
            }else if nlcode == "413"{
                suspicion = "0".to_string();
                msg.push_str(" Payload Too Large");
            }else if nlcode == "414"{
                suspicion = "0".to_string();
                msg.push_str(" URI Too Long");
            }else if nlcode == "415"{
                suspicion = "0".to_string();
                msg.push_str(" Unsupported Media Type");
            }else if nlcode == "416"{
                suspicion = "0".to_string();
                msg.push_str(" Range Not Satisfiable");
            }else if nlcode == "417"{
                suspicion = "0".to_string();
                msg.push_str(" Expectation Failed");
            }else if nlcode == "418"{
                suspicion = "0".to_string();
                msg.push_str(" Im a teapot");//shockingly this is a real code
            }else if nlcode == "421"{
                suspicion = "0".to_string();
                msg.push_str(" Misdirected Request");
            }else if nlcode == "422"{
                suspicion = "0".to_string();
                msg.push_str(" Unprocessable Content");
            }else if nlcode == "423"{
                suspicion = "0".to_string();
                msg.push_str(" Locked");
            }else if nlcode == "424"{
                suspicion = "0".to_string();
                msg.push_str(" Failed Dependency");
            }else if nlcode == "425"{
                suspicion = "0".to_string();
                msg.push_str(" Too Early");
            }else if nlcode == "426"{
                suspicion = "0".to_string();
                msg.push_str(" Upgrade Required");
            }else if nlcode == "428"{
                suspicion = "0".to_string();
                msg.push_str(" Precondition Required");
            }else if nlcode == "429"{
                suspicion = "0".to_string();
                msg.push_str(" Too Many Requests");
            }else if nlcode == "431"{
                suspicion = "0".to_string();
                msg.push_str(" Request Header Fields Too Large");
            }else if nlcode == "451"{
                suspicion = "0".to_string();
                msg.push_str(" Unavailable For Legal Reasons");
            }else if nlcode == "500"{
                suspicion = "0".to_string();
                msg.push_str(" Internal Server Error");
            }else if nlcode == "501"{
                suspicion = "0".to_string();
                msg.push_str(" Not Implemented");
            }else if nlcode == "502"{
                suspicion = "0".to_string();
                msg.push_str(" Bad Gateway")
            }else if nlcode == "503"{
                suspicion = "0".to_string();
                msg.push_str(" Service Unavailable");
            }else if nlcode == "504"{
                suspicion = "0".to_string();
                msg.push_str(" Gateway Timeout");
            }else if nlcode == "505"{
                suspicion = "0".to_string();
                msg.push_str(" HTTP Version Not Supported");
            }else if nlcode == "506"{
                suspicion = "0".to_string();
                msg.push_str(" Variant Also Negotiates");
            }else if nlcode == "507"{
                suspicion = "0".to_string();
                msg.push_str(" Insufficient Storage");
            }else if nlcode == "508"{
                suspicion = "0".to_string();
                msg.push_str(" Loop Detected");
            }else if nlcode == "510"{
                suspicion = "0".to_string();
                msg.push_str(" Not Extended");
            }else if nlcode == "511"{
                suspicion = "0".to_string();
                msg.push_str(" Network Authentication Required");
            }
            let mut data:HashMap<String,String> = HashMap::new();
            //data.insert(msg,suspicion);
            data.insert("msg".to_string(),msg.clone());
            data.insert("suspicion".to_string(),suspicion.clone());
            self.current_data.logs.insert(nlip.to_string(),data);
            let nllog = WebLog{ip:nlip.to_string(),msg:msg.to_string(),suspicion:suspicion};
            self.current_data.veclogs.push(nllog);
            i2 = i2 + 1;
        }
        return true;
    }
    // Can leave this for todo until testing. It should do the same as get data, but return a consistent predictable 
    // dataset to current data. It will be used for unit testing
    fn get_testing_data(&mut self) -> bool {
        todo!()
    }
    // Take the current data gathered from one of the functions above, using this data, 
    // plus the persistent data stored in the object to create logs (AKA alerts) 
    fn perform_analysis(&mut self) -> Vec<crate::Log> {
        let mut results: Vec<core_structs::Log> = Vec::new();

        return results;
    }
    fn get_name(&self) -> String{
        return self.module_name.clone();
    }
    fn build_config_fields(&self) -> Vec<crate::ConfigField> {
        let fields:Vec<ConfigField> = vec![];
        
        return fields;
    }
    fn retrieve_config_data(&mut self, data: HashMap<String,Vec<String>>) -> bool{
        for (field, vals) in data.into_iter(){
            for val in vals{
                println!("{}->{}", field, val);
            }
        }
        return true;
    }
}
// Must implement on your module, defines a default constructor. This is where any code that should run when IDS is FIRST LOADED. 
// You should also initialize an empty current data struct like this
impl Default for HTTPServer<'_> {
    fn default() -> Self {
        Self {
            lasterrorlen:0,
            lastaccesslen:0,
            module_name: String::from("HTTPServerModule"),
            current_data: CurrentData {
                logs: HashMap::new(),
                veclogs: Vec::new(),
            },
        }
    }
}
// Must be implemented to allow copying
// basically implement this function that creates a new version of itself with every parameter identical
// impl Clone for HTTPServer<'_> {
//     fn clone(&self) -> Self {
//         Self {
//             current_data: self.current_data,
//             lasterrorlen: self.lasterrorlen.clone(),
//             lastaccesslen: self.lastaccesslen.clone(),
//             module_name: self.module_name.clone(),
//         }
//     }
// }
