use crate::LaraCore::*;
use rand::{seq::SliceRandom, Rng};
use CoreTraits::AnalysisModule;
#[derive(Debug, Copy, Clone)]

struct CurrentData<'a> {
    some_file_name: &'a str,
    some_count_of_something: u8,
    something_else: f32,
}
pub struct Example<'a> {
    // This is the data generated by gatherData in current tick, it will be erased by the next tick
    current_data: CurrentData<'a>,
    //Everything else is persistent memory. The data you set in these will be remembered between ticks
    last_string: &'a str,
    pub history_of_filenames: Vec<&'a str>,

    blacklisted_filenames: Vec<String>,
    module_name: String,
}
impl AnalysisModule for Example<'_> {
    fn get_data(&mut self) -> bool {
        let stringiest: Vec<&str> = vec![
            "randomName.txt",
            "Invoice.pdf.scr",
            "test.xml",
            "passwords.docs",
            "testing.png",
        ];

        self.current_data = CurrentData {
            some_file_name: stringiest[rand::thread_rng().gen_range(0, 4)],
            some_count_of_something: rand::thread_rng().gen_range(0, 100),
            something_else: rand::thread_rng().gen_range(0.0, 1000.0),
        };
        return true;
    }

    fn get_testing_data(&mut self) -> bool {
        todo!()
    }

    fn perform_analysis(&mut self) -> Vec<crate::Log> {
        let mut results: Vec<CoreStruts::Log> = Vec::new();
        println!("{}", &self.current_data.some_file_name);
        if (self
            .history_of_filenames
            .contains(&self.current_data.some_file_name))
        {
            let mut msg: String = String::from("File '");
            msg.push_str(&self.current_data.some_file_name);
            msg.push_str("' was opened twice recently");
            results.push(CoreStruts::Log::new(
                CoreEnums::LogType::Serious,
                self.module_name.clone(),
                msg,
            ));
            self.history_of_filenames = Vec::new();
        } else {
            self.history_of_filenames
                .push(self.current_data.some_file_name);
        }
        self.last_string = self.current_data.some_file_name;
        return results;
    }
    fn get_name(&self) -> String{
        return self.module_name.clone();
    }
}
impl Default for Example<'_> {
    fn default() -> Self {
        Self {
            last_string: "",
            history_of_filenames: vec![],
            blacklisted_filenames: vec![],
            module_name: String::from("ExampleModule"),
            current_data: CurrentData {
                some_file_name: "",
                some_count_of_something: 0,
                something_else: 0.0,
            },
        }
    }
}
impl Clone for Example<'_> {
    fn clone(&self) -> Self {
        Self {
            current_data: self.current_data.clone(),
            last_string: self.last_string.clone(),
            history_of_filenames: self.history_of_filenames.clone(),
            blacklisted_filenames: self.blacklisted_filenames.clone(),
            module_name: self.module_name.clone(),
        }
    }
}
